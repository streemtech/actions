on:
  workflow_call:
    secrets:
      GITHUB_AUTH_TOKEN: #This can NOT be GITHUB_TOKEN as that is a pre-set secret.
        required: true
        description: "the token used to pull data from github, and checkout as needed."

      discord_webhook:
        required: true
        description: "value of the webhook to use for sending to discord"

    inputs:
      go_private:
        description: "the string sent to GOPRIVATE env var"
        type: string
        required: true
      branch:
        description: "the branch to reference for updates"
        type: string
        required: true
      skip_static:
        description: "if static checking should be skipped"
        type: boolean
        required: false
        default: false
      skip_shadow:
        description: "if shadowing should be skipped"
        type: boolean
        required: false
        default: false
      skip_lint:
        description: "if linting should be skipped"
        type: boolean
        required: false
        default: false
      all:
        description: "if true, all deps will be updated, not just streemtech ones"
        type: boolean
        required: true
      github_repository:
        required: true
        type: string
        description: "the repository in question."

#Reusable Workflow. Not a composite action unf.
jobs:
  nightlyUpdate:
    timeout-minutes: 15
    runs-on: self-hosted
    env:
      GOPRIVATE: ${{inputs.go_private}}

    steps:
      - uses: autometrics-dev/instrument-pipeline@v0
        name: instrument
        with:
          pushgateway: http://prom-aggregation-gateway.op-metrics:8080/metrics/action/nightly_update/repo/${{ github.event.repository.name }}
      - name: checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
          persist-credentials: true
          token: ${{ secrets.GITHUB_AUTH_TOKEN }}
          ref: ${{inputs.branch}}

      - name: Setup Golang
        uses: actions/setup-go@v5
        with:
          go-version: "1.22"
          check-latest: true
          cache: false

      - name: Setup git config
        run: git config --global url."https://x-oauth-basic:${{ secrets.GITHUB_AUTH_TOKEN }}@github.com".insteadOf "https://github.com"

      - name: "Update everything"
        if: ${{ inputs.all }}
        id: update_all
        run: |
          UPDATES=$(go list -u -f '{{if and (and (not .Main) (not (eq .Update nil)) (not .Indirect)) }}Upgrading {{.Version}} to {{.Update.Version}} for {{.Path}}{{end}}' -m all)
          go get -u ./...
          go mod tidy
          echo 'updates<<EOF' >> $GITHUB_OUTPUT
          echo "Updating all dependencies" >> $GITHUB_OUTPUT
          echo $UPDATES >> $GITHUB_OUTPUT
          echo 'EOF' >> $GITHUB_OUTPUT

      - name: "Update Streemtech"
        if: ${{ !inputs.all }}
        id: update
        run: |
          UPDATES=$(go list -u -f '{{if and (and (not .Main) (not (eq .Update nil)) (not .Indirect)) }}Upgrading {{.Version}} to {{.Update.Version}} for {{.Path}}{{end}}' -m all | grep streemtech)
          go get -u $(go list -f '{{if and (and (not .Main) (not (eq .Update nil)) (not .Indirect)) }}{{.Path}}{{end}}' -m all | grep streemtech)
          go mod tidy
          echo 'updates<<EOF' >> $GITHUB_OUTPUT
          echo "Updating dependencies" >> $GITHUB_OUTPUT
          echo $UPDATES >> $GITHUB_OUTPUT
          echo 'EOF' >> $GITHUB_OUTPUT

      - name: "re-generate as needed"
        run: |
          make gen

      - name: Test
        uses: robherley/go-test-action@v0
        with:
          testArguments: " -v -coverprofile=c.out ./..."

      - name: Generate Coverage Report
        run: go tool cover -html=c.out -o coverage.html

      - name: Shadow Test
        if: inputs.skip_shadow == false
        run: |
          go install golang.org/x/tools/go/analysis/passes/shadow/cmd/shadow@latest
          shadow -strict $(go list ./... | grep -v "api$")

      - name: Static Check
        if: inputs.skip_static == false
        run: |
          go install honnef.co/go/tools/cmd/staticcheck@latest
          staticcheck $(go list ./... | grep -v "api$")

      - name: golangci-lint
        if: inputs.skip_lint == false
        uses: golangci/golangci-lint-action@v6
        with:
          # Optional: version of golangci-lint to use in form of v1.2 or v1.2.3 or `latest` to use the latest version
          version: latest
          args: "-v"

      - name: Archive Test Coverage
        uses: actions/upload-artifact@v4
        with:
          path: coverage.html
          name: coverage.html
          retention-days: 7

      - name: Commit & Push changes
        if: ${{ inputs.all }}
        uses: stefanzweifel/git-auto-commit-action@v4
        with:
          commit_message: "Auto-Update #patch\n\n${{steps.update_all.outputs.updates}}"
          branch: ${{inputs.branch}}

      - name: Commit & Push changes
        if: ${{ !inputs.all }}
        uses: stefanzweifel/git-auto-commit-action@v4
        with:
          commit_message: "Auto-Update #patch\n\n${{steps.update.outputs.updates}}"
          branch: ${{inputs.branch}}

      - name: update success notification
        uses: sebastianpopp/discord-action@releases/v2
        if: success()
        with:
          webhook: ${{ secrets.discord_webhook }}
          message: ${{ github.repository }} `${{inputs.branch}}` ${{ inputs.all && 'all-package' || 'streemtech-only' }} dependency updates succeeded

      - name: update fail notification
        if: failure()
        uses: sebastianpopp/discord-action@releases/v2
        with:
          webhook: ${{ secrets.discord_webhook }}
          message: ${{ github.repository }} `${{inputs.branch}}` ${{ inputs.all && 'all-package' || 'streemtech-only' }} dependency updates failed <@&988658826599342120>
