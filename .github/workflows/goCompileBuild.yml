on:
  workflow_call:
    secrets:
      GITHUB_AUTH_TOKEN:
        required: true
        description: "the token used to pull data from github, and checkout as needed."
      REGISTRY_USERNAME:
        required: true
        description: the username for the registry
      REGISTRY_PASSWORD:
        required: true
        description: the password for the registry

    inputs:
      services:
        required: true
        type: string
        description: "a json array of service strings to call this workflow against."
      docker_registry_repo:
        required: true
        type: string
        description: "the repository of the registry to send the containers to"
      docker_registry:
        required: true
        type: string
        description: "destination docker registry"
      push_state:
        required: true
        type: string
        description: "one of qa-test, qa-prod, test, prod. Determines the tags used in the docker containers."
      tagMajor:
        description: "the major version of the tag"
        required: true
        type: string
      tagMinor:
        description: "the minor version of the tag."
        required: true
        type: string
      tagPatch:
        description: "the patch version of the tag."
        required: true
        type: string
      go_private:
        description: "the string sent to GOPRIVATE env var"
        type: string
        required: true
#Reusable Workflow. Not a composite action unf.
jobs:
  compileBuildPush:
    runs-on: self-hosted
    # strategy:
    #   matrix:
        # service: ${{fromJson(inputs.services)}}
    env:
      GOPRIVATE: ${{inputs.go_private}}
    steps:
      - name: checkout
        if: inputs.push_state == 'test'
        uses: actions/checkout@v2
        with:
          persist-credentials: false
          token: ${{ secrets.GITHUB_AUTH_TOKEN }}

      - name: Setup git config
        if: inputs.push_state == 'test'
        run: git config --global url."https://x-oauth-basic:${{ secrets.GITHUB_AUTH_TOKEN }}@github.com".insteadOf "https://github.com"

      - name: Setup Golang
        if: inputs.push_state == 'test'
        uses: actions/setup-go@v4
        with:
          go-version: '1.20'
          check-latest: true
          cache: false

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Generate
        if: inputs.push_state == 'test'
        run: make gen

      - name: Compile executable
        if: inputs.push_state == 'test'
        run: |
          echo '${{inputs.services}}' | jq -r -c '.[]' | while read i; do
            cd cmd/$i
            export GIT_HASH_SHORT=$(git rev-parse --short HEAD)
            export GIT_HASH=$(git rev-parse HEAD)
            export GIT_TAG="${{ inputs.tagMajor }}.${{ inputs.tagMinor }}.${{ inputs.tagPatch }}"
            export GIT_COMMIT_DATE=$(git show -s --format=%ci HEAD)
            export COMPILE_DATE=$(date)
            export COMPILE_METHOD="Github Actions"
            export DOCKER_TAG="${{ inputs.docker_registry }}/${{ inputs.docker_registry_repo }}/$i:${{ inputs.tagMajor }}.${{ inputs.tagMinor }}.${{ inputs.tagPatch }}"
            echo $GIT_HASH_SHORT
            echo $GIT_HASH
            echo $GIT_TAG
            echo $GIT_COMMIT_DATE
            echo $COMPILE_DATE
            echo $COMPILE_METHOD
            echo $DOCKER_TAG
            CGO_ENABLED=0 GOOS=linux go build -a -installsuffix cgo -ldflags "-X 'github.com/streemtech/libraries.GitHashShort=$GIT_HASH_SHORT' -X 'github.com/streemtech/libraries.GitHash=$GIT_HASH' -X 'github.com/streemtech/libraries.GitTag=$GIT_TAG' -X 'github.com/streemtech/libraries.GitCommitDate=$GIT_COMMIT_DATE' -X 'github.com/streemtech/libraries.CompileDate=$COMPILE_DATE' -X 'github.com/streemtech/libraries.CompileMethod=$COMPILE_METHOD' -X 'github.com/streemtech/libraries.DockerTag=$DOCKER_TAG'" -o main .
            cd ..
          done

      - name: Login to Harbor
        uses: docker/login-action@v2
        with:
          registry: ${{ inputs.docker_registry }}
          username: ${{ secrets.REGISTRY_USERNAME }}
          password: ${{ secrets.REGISTRY_PASSWORD }}

      - name: Build and push testing containers
        uses: docker/build-push-action@v4
        if: inputs.push_state == 'test'
        with:
          push: true
          tags: |
            ${{ inputs.docker_registry }}/${{ inputs.docker_registry_repo }}/$i:test
            ${{ inputs.docker_registry }}/${{ inputs.docker_registry_repo }}/$i:${{ github.sha }}
          context: ./cmd/$i
          file: ./cmd/$i/dockerfile

      - name: Build and push production containers
        if: inputs.push_state == 'prod'
        run: |
          echo '${{inputs.services}}' | jq -r -c '.[]' | while read i; do
            docker buildx imagetools create ${{ inputs.docker_registry }}/${{ inputs.docker_registry_repo }}/$i:${{ github.sha }} \
              --tag ${{ inputs.docker_registry }}/${{ inputs.docker_registry_repo }}/$i:latest \
              --tag ${{ inputs.docker_registry }}/${{ inputs.docker_registry_repo }}/$i:v${{ inputs.tagMajor }} \
              --tag ${{ inputs.docker_registry }}/${{ inputs.docker_registry_repo }}/$i:v${{ inputs.tagMajor }}.${{ inputs.tagMinor }} \
              --tag ${{ inputs.docker_registry }}/${{ inputs.docker_registry_repo }}/$i:v${{ inputs.tagMajor }}.${{ inputs.tagMinor }}.${{ inputs.tagPatch }}
          done

      - name: Build and push qa deployment containers
        if: inputs.push_state == 'qa'
        run: |
          echo '${{inputs.services}}' | jq -r -c '.[]' | while read i; do
            docker buildx imagetools create ${{ inputs.docker_registry }}/${{ inputs.docker_registry_repo }}/$i:${{ github.sha }} \
              --tag ${{ inputs.docker_registry }}/${{ inputs.docker_registry_repo }}/$i:qa-latest \
              --tag ${{ inputs.docker_registry }}/${{ inputs.docker_registry_repo }}/$i:q${{ inputs.tagMajor }} \
              --tag ${{ inputs.docker_registry }}/${{ inputs.docker_registry_repo }}/$i:q${{ inputs.tagMajor }}.${{ inputs.tagMinor }} \
              --tag ${{ inputs.docker_registry }}/${{ inputs.docker_registry_repo }}/$i:q${{ inputs.tagMajor }}.${{ inputs.tagMinor }}.${{ inputs.tagPatch }}
          done
