on:
  workflow_call:
    secrets:
      # GO_MODULES_TOKEN:
      #   required: true
      #   description: "the token used to pull data from github, and checkout as needed."
      GITHUB_AUTH_TOKEN: #This can NOT be GITHUB_TOKEN as that is a pre-set secret.
        required: true
        description: "the token used to pull data from github, and checkout as needed."

    inputs:
      version:
        required: true
        type: boolean
        description: if the version should be incremented or not.
      go_private:
        description: "the string sent to GOPRIVATE env var"
        type: string
        required: true
      skip_static:
        description: "if static checking should be skipped"
        type: boolean
        required: false
        default: false
      skip_shadow:
        description: "if shadowing should be skipped"
        type: boolean
        required: false
        default: false
      skip_lint:
        description: "if linting should be skipped"
        type: boolean
        required: false
        default: false

    outputs:
      newTag:
        description: "The full new tag cretaed"
        value: ${{ jobs.unitTests.outputs.newTag }}
      tagMajor:
        description: "the major version of the tag"
        value: ${{ jobs.unitTests.outputs.tagMajor }}
      tagMinor:
        description: "the minor version of the tag."
        value: ${{ jobs.unitTests.outputs.tagMinor }}
      tagPatch:
        description: "the patch version of the tag."
        value: ${{ jobs.unitTests.outputs.tagPatch }}

#Reusable Workflow. Not a composite action unf.
jobs:
  unitTests:
    timeout-minutes: 15
    # strategy:
    #   matrix:
    #     name: ${{fromJson(inputs.names)}}
    runs-on: self-hosted
    outputs:
      newTag: ${{ steps.bump_tag.outputs.new_tag }}
      tagMajor: ${{ steps.semver_parser.outputs.major }}
      tagMinor: ${{ steps.semver_parser.outputs.minor }}
      tagPatch: ${{ steps.semver_parser.outputs.patch }}
    env:
      GOPRIVATE: ${{inputs.go_private}}

    steps:
      - uses: autometrics-dev/instrument-pipeline@v0
        name: instrument
        with:
          pushgateway: http://prom-aggregation-gateway.op-metrics:8080/metrics/action/unit_tests/repo/${{ github.event.repository.name }}

      # Cant run without github token
      # - name: Cancel Previous Runs
      #   uses: styfle/cancel-workflow-action@v0.12.1

      - name: checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
          persist-credentials: false
          token: ${{ secrets.GITHUB_AUTH_TOKEN }}

      - name: Setup git config
        run: git config --global url."https://x-oauth-basic:${{ secrets.GITHUB_AUTH_TOKEN }}@github.com".insteadOf "https://github.com"

      - name: Setup Golang
        if: "!contains(github.event.head_commit.message, '#skipTest')"
        uses: actions/setup-go@v4
        with:
          go-version: "1.22"
          check-latest: true
          cache: false

      - name: Generate
        if: "!contains(github.event.head_commit.message, '#skipTest')"
        run: make gen

      - name: Test
        if: "!contains(github.event.head_commit.message, '#skipTest')"
        run: go test -v -coverprofile=c.out ./...

      - name: Generate Coverage Report
        if: "!contains(github.event.head_commit.message, '#skipTest')"
        run: go tool cover -html=c.out -o coverage.html

      - name: Shadow Test
        if: inputs.skip_shadow == false && !contains(github.event.head_commit.message, '#skipTest')
        run: |
          go install golang.org/x/tools/go/analysis/passes/shadow/cmd/shadow@latest
          shadow -strict $(go list ./... | grep -v "api$")

      - name: Static Check
        if: inputs.skip_static == false && !contains(github.event.head_commit.message, '#skipTest')
        run: |
          go install honnef.co/go/tools/cmd/staticcheck@latest
          staticcheck $(go list ./... | grep -v "api$")

      - name: golangci-lint
        if: inputs.skip_lint == false && !contains(github.event.head_commit.message, '#skipTest')
        uses: golangci/golangci-lint-action@v3
        with:
          # Optional: version of golangci-lint to use in form of v1.2 or v1.2.3 or `latest` to use the latest version
          version: latest
          skip-pkg-cache: true
          skip-build-cache: true
          args: "-v"

      - name: Archive Test Coverage
        if: "!contains(github.event.head_commit.message, '#skipTest')"
        uses: actions/upload-artifact@v2
        with:
          path: coverage.html
          name: coverage.html
          retention-days: 7

      - name: calculate test version number.
        id: bump_tag
        # Do not upgrade. This causes breaking as it is "unable to find username for https://github.com"
        uses: anothrNick/github-tag-action@1.52.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_AUTH_TOKEN }}
          WITH_V: true
          DEFAULT_BUMP: minor
          DRY_RUN: ${{ !inputs.version }}
          VERBOSE: true
          #GIT_API_TAGGING: false

      - name: Parse semver string
        id: semver_parser
        uses: booxmedialtd/ws-action-parse-semver@v1.4.7
        with:
          input_string: "${{ steps.bump_tag.outputs.new_tag }}"
