on:
  workflow_call:
    secrets:
      REGISTRY_USERNAME:
        required: true
        description: the username for the registry
      REGISTRY_PASSWORD:
        required: true
        description: the password for the registry
      GITHUB_AUTH_TOKEN:
        required: true
        description: "the token used to pull data from github, and checkout as needed."
      discord_webhook:
        required: true
        description: "value of the webhook to use for sending to discord"

    inputs:
      e2eFolders:
        required: true
        type: string
        description: "a json array of the folders to cd into to run end to end tests against. Each folder must have a makefile with 'logs', 'wait', 'test-pre', and 'test-post', along with a override.yml dockerfile."
      go_private:
        description: "the string sent to GOPRIVATE env var"
        type: string
        required: true
      github_repository:
        required: true
        type: string
        description: "the repository in question."
      github_server_url:
        required: true
        type: string
        description: "the github server url."
      github_run_id:
        required: true
        type: string
        description: "the run ID."

jobs:
  #************* END TO END TESTS ***************
  endToEndTests:
    strategy:
      matrix:
        folder: ${{fromJson(inputs.e2eFolders)}}
    env:
      GOPRIVATE: ${{inputs.go_private}}
    runs-on: ubuntu-latest

    steps:
      - name: checkout
        uses: actions/checkout@v2
        with:
          persist-credentials: false

      - name: Setup git config
        run: git config --global url."https://x-oauth-basic:${{ secrets.GITHUB_AUTH_TOKEN }}@github.com".insteadOf "https://github.com"

      - name: Login to Harbor
        uses: docker/login-action@v1
        with:
          registry: harbor.streem.tech
          username: ${{ secrets.REGISTRY_USERNAME }}
          password: ${{ secrets.REGISTRY_PASSWORD }}

      - name: Setup Golang
        uses: actions/setup-go@v2
        with:
          go-version: 1.20
          check-latest: true
          cache: true

        # Checks if a full dockerfile exists to use.
      - name: Check dockerfile
        id: check_docker_files
        uses: andstor/file-existence-action@v1
        with:
          files: "./end-to-end/${{matrix.folder}}/docker-compose.yml"

        # If the full docker file does not exist, assume an override file exists and use that
      - name: docker up (use base)
        run: docker-compose -f ./end-to-end/docker-compose.yml -f ./end-to-end/${{matrix.folder}}/override.yml up -d
        if: steps.check_docker_files.outputs.files_exists == 'false'

        # Use only the full dockerfile.
      - name: docker up (all in test)
        run: docker-compose -f ./end-to-end/${{matrix.folder}}/docker-compose.yml up -d
        if: steps.check_docker_files.outputs.files_exists == 'true'

      - name: list all containers
        run: docker ps -a

      - name: Wait for results to be up
        run: make wait
        working-directory: ./end-to-end/${{matrix.folder}}
      - name: Wait for results to be up Notification
        uses: rjstone/discord-webhook-notify@v1
        with:
          username: Actions Bot
          avatarUrl: https://github.githubassets.com/images/modules/logos_page/Octocat.png
          webhookUrl: ${{ secrets.discord_webhook }}
          severity: info
          color: "#851ebd"
          description: | 
            Repository: ${{ inputs.github_repository }} 
            Step: Wait for results to be up 
            URL: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}

      - name: run pre-newman tests
        run: make test-pre
        working-directory: ./end-to-end/${{matrix.folder}}
      - name: run pre-newman tests Notification
        uses: rjstone/discord-webhook-notify@v1
        with:
          username: Actions Bot
          avatarUrl: https://github.githubassets.com/images/modules/logos_page/Octocat.png
          webhookUrl: ${{ secrets.discord_webhook }}
          severity: info
          color: "#851ebd"
          description: | 
            Repository: ${{ inputs.github_repository }} 
            Step: run pre-newman tests 
            URL: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}

      - name: Check newman existence
        id: check_newman_files
        uses: andstor/file-existence-action@v1
        with:
          files: "./end-to-end/${{matrix.folder}}/e2e.postman_environment.json, ./end-to-end/${{matrix.folder}}/e2e.postman_collection.json"

      - name: Run newman tests
        uses: matt-ball/newman-action@master
        if: steps.check_newman_files.outputs.files_exists == 'true'
        with:
          collection: ./end-to-end/${{matrix.folder}}/e2e.postman_collection.json
          environment: ./end-to-end/${{matrix.folder}}/e2e.postman_environment.json
          insecure: true
      - name: Run newman tests Notification
        uses: rjstone/discord-webhook-notify@v1
        with:
          username: Actions Bot
          avatarUrl: https://github.githubassets.com/images/modules/logos_page/Octocat.png
          webhookUrl: ${{ secrets.discord_webhook }}
          severity: info
          color: "#851ebd"
          description: | 
            Repository: ${{ inputs.github_repository }} 
            Step: Run newman tests 
            URL: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}

      - name: run post newman tests
        run: make test-post
        working-directory: ./end-to-end/${{matrix.folder}}
      - name: run post newman tests Notification
        uses: rjstone/discord-webhook-notify@v1
        with:
          username: Actions Bot
          avatarUrl: https://github.githubassets.com/images/modules/logos_page/Octocat.png
          webhookUrl: ${{ secrets.discord_webhook }}
          severity: info
          color: "#851ebd"
          description: | 
            Repository: ${{ inputs.github_repository }} 
            Step: run post newman tests 
            URL: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}

      - name: output logs
        if: ${{ failure() }}
        working-directory: ./end-to-end/${{matrix.folder}}
        run: |
          docker ps
          echo "******************************************"
          make logs
